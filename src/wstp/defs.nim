const
  WSTP_H* = true
  WSVERS_H* = true
  MLPLATFM_H* = true
  WIN64_MATHLINK* = 1
  WIN32_MATHLINK* = 1
  I86_WIN32_MATHLINK* = 1
  ALPHA_WIN32_MATHLINK* = 1
  CYGWIN_MATHLINK* = 1
  WIN16_MATHLINK* = 1
  SUN_MATHLINK* = 1
  STUDIO12_U64_SOLARIS_MATHLINK* = 1
  U64_SOLARIS_MATHLINK* = 1
  U32_SOLARIS_MATHLINK* = 1
  SUNOS_MATHLINK* = 1
  SPARC_SUN_MATHLINK* = 1
  I386_SOLARIS_MATHLINK* = 1
  X86_64_SOLARIS_MATHLINK* = 1
  DARWIN_MATHLINK* = 1
  POWERPC_DARWIN_MATHLINK* = 1
  PPC_DARWIN_MATHLINK* = 1
  PPC64_DARWIN_MATHLINK* = 1
  INTEL_DARWIN_MATHLINK* = 1
  X86_DARWIN_MATHLINK* = 1
  X86_64_DARWIN_MATHLINK* = 1
  ARM_DARWIN_MATHLINK* = 1
  ARM64_DARWIN_MATHLINK* = 1
  DARWIN_MATHLINK_UNIX03* = 1
  CLANG_MATHLINK* = 1
  LINUX_MATHLINK* = 1
  X86_64_LINUX_MATHLINK* = 1
  IA64_LINUX_MATHLINK* = 1
  I86_LINUX_MATHLINK* = 1
  PPC_LINUX_MATHLINK* = 1
  AXP_LINUX_MATHLINK* = 1
  ANDROID_LINUX_MATHLINK* = 1
  ANDROID_ARM_LINUX_MATHLINK* = 1
  ARM_LINUX_MATHLINK* = 1
  DIGITAL_MATHLINK* = 1
  ALPHA_DIGITAL_MATHLINK* = 1
  AIX_MATHLINK* = 1
  A64_AIX_MATHLINK* = 1
  IRIX_MATHLINK* = 1
  N32_IRIX_MATHLINK* = 1
  M64_IRIX_MATHLINK* = 1
  HPUX_MATHLINK* = 1
  LP64_HPUX_MATHLINK* = 1
  SCO_MATHLINK* = 1
  NETBSD_MATHLINK* = 1
  FREEBSD_MATHLINK* = 1
  BSDI_MATHLINK* = 1
  NO_GLOBAL_DATA* = 0
  LITTLEENDIAN_NUMERIC_TYPES* = 1
  BIGENDIAN_NUMERIC_TYPES* = 1
  WSVERSION* = 6
  WSREVISION* = 40
  WSCREATIONID* = 114411
  WSAPI4REVISION* = 25
  WSINTERFACE* = 4
  WSAPIREVISION* = WSAPI4REVISION
  WSOLDDEFINITION* = WSAPI4REVISION
  REBRAND_H* = true
  ML_C* = true
  ML_EXTERN_C* = true
  ML_END_EXTERN_C* = true
  WS_C* = true
  WS_EXTERN_C* = true
  WS_END_EXTERN_C* = true
  WIN32_LEAN_AND_MEAN* = true
  WIN32_EXTRA_LEAN* = true
  MLDEVICE_H* = true
  MLPROTOTYPES* = 1

template P*(s: untyped): untyped =
  s

const
  MLFAR_H* = true
  FAR* = true
  MLHUGE* = true
  MLTYPES_H* = true
  MLBASICTYPES_H* = true
  MLINT64_H* = true
  ML64BIT_MATHLINK* = 1
  ML_SMALLEST_SIGNED_64BIT* = -9223372036854775807'i64 - 1
  ML_LARGEST_SIGNED_64BIT* = 9223372036854775807'i64
  NO_INT64_STRUCT* = true
  NO_MLINT64_STRUCT* = true


const
  MLEXPORT* = true
  WSEXPORT* = true


const
  MLCB* = true
  WSCB* = true
  MLAPI* = true
  WSAPI* = true
  MLATTR* = true
  WSATTR* = true

##  #define MLDEFN( rtype, name, params) extern MLATTR rtype MLAPI MLEXPORT name params
##  #define MLDECL( rtype, name, params) extern rtype MLAPI name P(params)
##  #define WSDEFN( rtype, name, params) extern WSATTR rtype WSAPI WSEXPORT name params
##  #define WSDECL( rtype, name, params) extern rtype WSAPI name P(params)
##  #define ML_DEFN( rtype, name, params) extern rtype MLAPI_ MLEXPORT name params
##  #define ML_DECL( rtype, name, params) extern ML_C rtype MLAPI_ name P(params)
##  #define MLCBPROC( rtype, name, params) typedef rtype (MLCB * name) P(params)
##  #define MLCBDECL( rtype, name, params) extern rtype MLCB name P(params)
##  #define MLCBDEFN( rtype, name, params) extern rtype MLCB name params

const
  MLCONST* = true
  MLSUCCESS* = (1)              ## bugcheck:  this stuff doesnt belong where it can be seen at MLAPI_ layer
  MLFAILURE* = (0)


const
  MLBN* = true
  BN* = MLBN
  MLDEV_WRITE_WINDOW* = 0
  MLDEV_WRITE* = 1
  MLDEV_HAS_DATA* = 2
  MLDEV_READ* = 3
  MLDEV_READ_COMPLETE* = 4
  MLDEV_ACKNOWLEDGE* = 5
  T_DEV_WRITE_WINDOW* = MLDEV_WRITE_WINDOW
  T_DEV_WRITE* = MLDEV_WRITE
  T_DEV_HAS_DATA* = MLDEV_HAS_DATA
  T_DEV_READ* = MLDEV_READ
  T_DEV_READ_COMPLETE* = MLDEV_READ_COMPLETE
  SCATTERED* = 0
  NOT_SCATTERED* = 1

template CallMLDeviceProc*(userRoutine, thing, selector, p1, p2: untyped): untyped =
  ((userRoutine)[])((thing), (selector), (dev_voidp)(p1), (dev_voidp)(p2))

template NewMLDeviceProc*(userRoutine: untyped): untyped =
  (userRoutine)

const
  MLAPI_H* = true
  MLALLOC_H* = true

template CallMLAllocatorProc*(userRoutine, size: untyped): untyped =
  ((userRoutine)[])((size))

template NewMLAllocatorProc*(userRoutine: untyped): untyped =
  (userRoutine)

template CallMLDeallocatorProc*(userRoutine, p: untyped): untyped =
  ((userRoutine)[])((p))

template NewMLDeallocatorProc*(userRoutine: untyped): untyped =
  (userRoutine)

const
  MLCallAllocator* = CallMLAllocatorProc
  MLNewAllocator* = NewMLAllocatorProc
  MLCallDeallocator* = CallMLDeallocatorProc
  MLNewDeallocator* = NewMLDeallocatorProc
  WSNTYPES_H* = true
  WSNUMENV_H* = true
  REALBIT* = 4
  REAL_MASK* = (1 shl REALBIT)
  XDRBIT* = 5
  XDR_MASK* = (1 shl XDRBIT)
  BINARYBIT* = 7
  BINARY_MASK* = (1 shl BINARYBIT)
  SIZEVARIANTBIT* = 6
  SIZEVARIANT_MASK* = (1 shl SIZEVARIANTBIT)
  WSTK_INVALID* = 155
  WSTK_8BIT_SIGNED_2sCOMPLEMENT_INTEGER* = 160
  WSTK_8BIT_UNSIGNED_2sCOMPLEMENT_INTEGER* = 161
  WSTK_8BIT_UNSIGNED_INTEGER* = WSTK_8BIT_UNSIGNED_2sCOMPLEMENT_INTEGER
  WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 162
  WSTK_16BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 163
  WSTK_16BIT_UNSIGNED_BIGENDIAN_INTEGER* = WSTK_16BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 164
  WSTK_32BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 165
  WSTK_32BIT_UNSIGNED_BIGENDIAN_INTEGER* = WSTK_32BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 166
  WSTK_64BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 167
  WSTK_64BIT_UNSIGNED_BIGENDIAN_INTEGER* = WSTK_64BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 226
  WSTK_16BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 227
  WSTK_16BIT_UNSIGNED_LITTLEENDIAN_INTEGER* = WSTK_16BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 228
  WSTK_32BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 229
  WSTK_32BIT_UNSIGNED_LITTLEENDIAN_INTEGER* = WSTK_32BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 230
  WSTK_64BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 231
  WSTK_64BIT_UNSIGNED_LITTLEENDIAN_INTEGER* = WSTK_64BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTK_BIGENDIAN_IEEE754_SINGLE* = 180
  WSTK_BIGENDIAN_IEEE754_DOUBLE* = 182
  WSTK_BIGENDIAN_128BIT_DOUBLE* = 184
  WSTK_LITTLEENDIAN_IEEE754_SINGLE* = 244
  WSTK_LITTLEENDIAN_IEEE754_DOUBLE* = 246
  WSTK_LITTLEENDIAN_128BIT_DOUBLE* = 248

template WSNE_SIZESELECTOR*(tok: untyped): untyped =
  WSNE_SELECTOR(0, tok)

const
  WSNE_INITSELECTOR* = (0)

template WSNE_TOSTRINGSELECTOR*(tok: untyped): untyped =
  WSNE_SELECTOR(if WSNE_IS_REAL(tok): WSTKREAL else: WSTKINT, tok)

template WSNE_FROMSTRINGSELECTOR*(dtok, stok: untyped): untyped =
  WSNE_SELECTOR(dtok, stok)

template WSNE_STOK*(selector: untyped): untyped =
  ((selector) and 0x000000FF)

template WSNE_DTOK*(selector: untyped): untyped =
  (((selector) and 0x0000FF00) shr 8)

template WSNE_IS_BINARY*(tok: untyped): untyped =
  ((tok) and BINARY_MASK)

template WSNE_IS_REAL*(tok: untyped): untyped =
  ((tok) and REAL_MASK)

template WSNE_TEXT_TOKEN*(tok: untyped): untyped =
  (if WSNE_IS_REAL(tok): WSTKREAL else: WSTKINT)

const
  WSTK_CSHORT_P* = ((BINARY_MASK or SIZEVARIANT_MASK or 1))
  WSTK_CINT_P* = ((BINARY_MASK or SIZEVARIANT_MASK or 2))
  WSTK_CLONG_P* = ((BINARY_MASK or SIZEVARIANT_MASK or 3))
  WSTK_CFLOAT_P* = ((BINARY_MASK or SIZEVARIANT_MASK or REAL_MASK or 1))
  WSTK_CDOUBLE_P* = ((BINARY_MASK or SIZEVARIANT_MASK or REAL_MASK or 2))
  WSTK_CLONGDOUBLE_P* = ((BINARY_MASK or SIZEVARIANT_MASK or REAL_MASK or 3))
  WSTK_64BIT_LITTLEENDIAN_STRUCTURE* = 196
  WSTK_64BIT_BIGENDIAN_STRUCTURE* = 197
  WSTK_128BIT_EXTENDED* = 158
  WSTK_128BIT_LONGDOUBLE* = 158
  WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED* = 218
  WSTK_INTEL_80BIT_EXTENDED* = 216
  WSMASTIFF_NUMERICS_ID* = "mastiff"
  WSMASTIFF_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSMASTIFF_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSMASTIFF_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSMASTIFF_CLONGDOUBLE* = WSTK_128BIT_EXTENDED
  WSMASTIFF_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSMASTIFF_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSMASTIFF_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSMASTIFF_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSMASTIFF_WSLONGDOUBLE* = WSTK_128BIT_EXTENDED
  WSJAPANESECHIN_NUMERICS_ID* = "japanesechin"
  WSJAPANESECHIN_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSJAPANESECHIN_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSJAPANESECHIN_CLONGDOUBLE* = WSTK_128BIT_EXTENDED
  WSJAPANESECHIN_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSJAPANESECHIN_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSJAPANESECHIN_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSJAPANESECHIN_WSLONGDOUBLE* = WSTK_128BIT_EXTENDED
  WSBORZOI_NUMERICS_ID* = "borzoi"
  WSBORZOI_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSBORZOI_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBORZOI_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBORZOI_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORZOI_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSBORZOI_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBORZOI_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBRIARD_NUMERICS_ID* = "briard"
  WSBRIARD_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBRIARD_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBRIARD_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBRIARD_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBRIARD_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKEESHOND_NUMERICS_ID* = "keeshond"
  WSKEESHOND_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSKEESHOND_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSKEESHOND_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKEESHOND_CLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKEESHOND_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKEESHOND_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSKEESHOND_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSKEESHOND_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKEESHOND_WSLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKOMONDOR_NUMERICS_ID* = "komondor"
  WSKOMONDOR_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSKOMONDOR_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKOMONDOR_CLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKOMONDOR_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSKOMONDOR_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSKOMONDOR_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSKOMONDOR_WSLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSNORWEGIANELKHOUND_NUMERICS_ID* = "norwegianelkhound"
  WSNORWEGIANELKHOUND_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSNORWEGIANELKHOUND_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSNORWEGIANELKHOUND_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSNORWEGIANELKHOUND_CLONGDOUBLE* = WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED
  WSNORWEGIANELKHOUND_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWEGIANELKHOUND_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSNORWEGIANELKHOUND_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSNORWEGIANELKHOUND_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSNORWEGIANELKHOUND_WSLONGDOUBLE* = WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED
  WSNORWICHTERRIOR_NUMERICS_ID* = "norwichterrior"
  WSNORWICHTERRIOR_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSNORWICHTERRIOR_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSNORWICHTERRIOR_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSNORWICHTERRIOR_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSNORWICHTERRIOR_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSNORWICHTERRIOR_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSNORWICHTERRIOR_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSSAINTBERNARD_NUMERICS_ID* = "saintbernarnd"
  WSSAINTBERNARD_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSSAINTBERNARD_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSSAINTBERNARD_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSSAINTBERNARD_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSSAINTBERNARD_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSSAINTBERNARD_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAINTBERNARD_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSSAINTBERNARD_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSSAINTBERNARD_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSBERNESEMOUNTAINDOG_NUMERICS_ID* = "bernesemountaindog"
  WSBERNESEMOUNTAINDOG_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBERNESEMOUNTAINDOG_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBERNESEMOUNTAINDOG_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSBERNESEMOUNTAINDOG_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBERNESEMOUNTAINDOG_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBERNESEMOUNTAINDOG_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBERNESEMOUNTAINDOG_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSSETTER_NUMERICS_ID* = "setter"
  WSSETTER_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSSETTER_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSSETTER_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSSETTER_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSSETTER_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSSETTER_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSETTER_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSSETTER_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSSETTER_WSLONGDOUBLE* = WSTK_INTEL_80BIT_EXTENDED
  WSFRENCH_BULLDOG_NUMERICS_ID* = "french_bulldog"
  WSFRENCH_BULLDOG_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSFRENCH_BULLDOG_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSFRENCH_BULLDOG_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSFRENCH_BULLDOG_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSFRENCH_BULLDOG_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSFRENCH_BULLDOG_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSFRENCH_BULLDOG_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSFRENCH_BULLDOG_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSFRENCH_BULLDOG_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBICHON_FRISE_NUMERICS_ID* = "bichon_frise"
  WSBICHON_FRISE_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBICHON_FRISE_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBICHON_FRISE_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBICHON_FRISE_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBICHON_FRISE_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBICHON_FRISE_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBICHON_FRISE_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSHELEN_NUMERICS_ID* = "helen"
  WSHELEN_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSHELEN_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSHELEN_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSHELEN_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSHELEN_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSHELEN_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSHELEN_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSHELEN_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSHELEN_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBEAGLE_NUMERICS_ID* = "beagle"
  WSBEAGLE_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSBEAGLE_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBEAGLE_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBEAGLE_CLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBEAGLE_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSBEAGLE_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBEAGLE_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBEAGLE_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBEAGLE_WSLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBULLTERRIER_NUMERICS_ID* = "bullterrier"
  WSBULLTERRIER_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSBULLTERRIER_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBULLTERRIER_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBULLTERRIER_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSBULLTERRIER_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSBULLTERRIER_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBULLTERRIER_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBULLTERRIER_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBULLTERRIER_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSBORDERTERRIER_NUMERICS_ID* = "borderterrier"
  WSBORDERTERRIER_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBORDERTERRIER_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBORDERTERRIER_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSBORDERTERRIER_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSBORDERTERRIER_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSBORDERTERRIER_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSBORDERTERRIER_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSBASENJI_NUMERICS_ID* = "basenji"
  WSBASENJI_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSBASENJI_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBASENJI_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBASENJI_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSBASENJI_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSBASENJI_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBASENJI_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBASENJI_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBASENJI_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSSHARPEI_NUMERICS_ID* = "sharpei"
  WSSHARPEI_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSSHARPEI_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSSHARPEI_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSSHARPEI_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSSHARPEI_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSSHARPEI_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHARPEI_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSSHARPEI_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSSHARPEI_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSTIBETANMASTIFF_NUMERICS_ID* = "tibetanmastiff"
  WSTIBETANMASTIFF_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSTIBETANMASTIFF_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSTIBETANMASTIFF_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSTIBETANMASTIFF_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSTIBETANMASTIFF_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSTIBETANMASTIFF_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSTIBETANMASTIFF_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSGREATDANE_NUMERICS_ID* = "greatdane"
  WSGREATDANE_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSGREATDANE_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSGREATDANE_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSGREATDANE_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSGREATDANE_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSGREATDANE_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSGREATDANE_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSREDDOG_NUMERICS_ID* = "reddog"
  WSREDDOG_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSREDDOG_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSREDDOG_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSREDDOG_CLONGDOUBLE* = WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED
  WSREDDOG_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSREDDOG_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSREDDOG_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSREDDOG_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSREDDOG_WSLONGDOUBLE* = WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED
  WSAUSTRALIANCATTLEDOG_NUMERICS_ID* = "australiancattledog"
  WSAUSTRALIANCATTLEDOG_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSAUSTRALIANCATTLEDOG_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSAUSTRALIANCATTLEDOG_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSAUSTRALIANCATTLEDOG_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAUSTRALIANCATTLEDOG_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSAUSTRALIANCATTLEDOG_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSAUSTRALIANCATTLEDOG_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSBOXER_NUMERICS_ID* = "boxer"
  WSBOXER_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBOXER_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBOXER_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSBOXER_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOXER_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBOXER_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBOXER_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSAKITAINU_NUMERICS_ID* = "akitainu"
  WSAKITAINU_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSAKITAINU_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSAKITAINU_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSAKITAINU_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSAKITAINU_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSAKITAINU_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSAKITAINU_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHIHUAHUA_NUMERICS_ID* = "chihuahua"
  WSCHIHUAHUA_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSCHIHUAHUA_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSCHIHUAHUA_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHIHUAHUA_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHIHUAHUA_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSCHIHUAHUA_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHIHUAHUA_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSCHIHUAHUA_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHIHUAHUA_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSROTTWEILER_NUMERICS_ID* = "rottweiler"
  WSROTTWEILER_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSROTTWEILER_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSROTTWEILER_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSROTTWEILER_CLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSROTTWEILER_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSROTTWEILER_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSROTTWEILER_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSROTTWEILER_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSROTTWEILER_WSLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPHARAOHHOUND_NUMERICS_ID* = "pharaohhound"
  WSPHARAOHHOUND_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSPHARAOHHOUND_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPHARAOHHOUND_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSPHARAOHHOUND_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPHARAOHHOUND_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSPHARAOHHOUND_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPHARAOHHOUND_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSTROUT_NUMERICS_ID* = "trout"
  WSTROUT_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSTROUT_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSTROUT_CLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSTROUT_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSTROUT_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSTROUT_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSTROUT_WSLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPUG_NUMERICS_ID* = "pug"
  WSPUG_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSPUG_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSPUG_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPUG_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSPUG_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSPUG_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPUG_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSPUG_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPUG_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSPOINTER_NUMERICS_ID* = "pointer"
  WSPOINTER_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSPOINTER_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSPOINTER_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPOINTER_CLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPOINTER_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSPOINTER_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSPOINTER_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSPOINTER_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSPOINTER_WSLONGDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSSAMOYED_NUMERICS_ID* = "samoyed"
  WSSAMOYED_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSSAMOYED_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSSAMOYED_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSSAMOYED_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSAMOYED_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSSAMOYED_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSSAMOYED_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSSIBERIANHUSKY_NUMERICS_ID* = "siberianhusky"
  WSSIBERIANHUSKY_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSSIBERIANHUSKY_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSSIBERIANHUSKY_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSSIBERIANHUSKY_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSSIBERIANHUSKY_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSSIBERIANHUSKY_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSSIBERIANHUSKY_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSSIBERIANHUSKY_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSSIBERIANHUSKY_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSSHIBAINU_NUMERICS_ID* = "shibainu"
  WSSHIBAINU_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSSHIBAINU_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSSHIBAINU_CLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSSHIBAINU_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSSHIBAINU_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSSHIBAINU_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSSHIBAINU_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_128BIT_DOUBLE
  WSNEWFOUNDLAND_NUMERICS_ID* = "newfoundland"
  WSNEWFOUNDLAND_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_CINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSNEWFOUNDLAND_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSNEWFOUNDLAND_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSNEWFOUNDLAND_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSNEWFOUNDLAND_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_WSINT64* = WSTK_64BIT_BIGENDIAN_STRUCTURE
  WSNEWFOUNDLAND_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSNEWFOUNDLAND_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSNEWFOUNDLAND_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSNEWFOUNDLAND_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSAFFENPINSCHER_NUMERICS_ID* = "affenpinscher"
  WSAFFENPINSCHER_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_CLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_CSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_CFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSAFFENPINSCHER_CDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSAFFENPINSCHER_CLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSAFFENPINSCHER_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_WSLONG* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_WSSIZE_T* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  WSAFFENPINSCHER_WSFLOAT* = WSTK_BIGENDIAN_IEEE754_SINGLE
  WSAFFENPINSCHER_WSDOUBLE* = WSTK_BIGENDIAN_IEEE754_DOUBLE
  WSAFFENPINSCHER_WSLONGDOUBLE* = WSTK_BIGENDIAN_128BIT_DOUBLE
  WSBEAUCERON_NUMERICS_ID* = "beauceron"
  WSBEAUCERON_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBEAUCERON_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBEAUCERON_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBEAUCERON_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBEAUCERON_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBEAUCERON_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBEAUCERON_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBERGAMASCO_NUMERICS_ID* = "bergamasco"
  WSBERGAMASCO_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBERGAMASCO_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBERGAMASCO_CLONGDOUBLE* = WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED
  WSBERGAMASCO_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBERGAMASCO_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBERGAMASCO_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBERGAMASCO_WSLONGDOUBLE* = WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED
  WSBOERBOEL_NUMERICS_ID* = "boerboel"
  WSBOERBOEL_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBOERBOEL_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBOERBOEL_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBOERBOEL_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSBOERBOEL_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSBOERBOEL_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSBOERBOEL_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHINOOK_NUMERICS_ID* = "chinook"
  WSCHINOOK_CSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_CINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_CLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_CINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_CSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_CFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSCHINOOK_CDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHINOOK_CLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHINOOK_WSSHORT* = WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_WSINT* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_WSLONG* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_WSINT64* = WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_WSSIZE_T* = WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  WSCHINOOK_WSFLOAT* = WSTK_LITTLEENDIAN_IEEE754_SINGLE
  WSCHINOOK_WSDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSCHINOOK_WSLONGDOUBLE* = WSTK_LITTLEENDIAN_IEEE754_DOUBLE
  WSOLD_WIN_ENV_NUMERICS_ID* = "Sep 13 1996, 13:46:34"
  WSOLD_WIN_ENV_CSHORT* = WSTK_CSHORT_P
  WSOLD_WIN_ENV_CINT* = WSTK_CINT_P
  WSOLD_WIN_ENV_CLONG* = WSTK_CLONG_P
  WSOLD_WIN_ENV_CINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSOLD_WIN_ENV_CSIZE_T* = WSTK_CLONG_P
  WSOLD_WIN_ENV_CFLOAT* = WSTK_CFLOAT_P
  WSOLD_WIN_ENV_CDOUBLE* = WSTK_CDOUBLE_P
  WSOLD_WIN_ENV_CLONGDOUBLE* = WSTK_CLONGDOUBLE_P
  WSOLD_WIN_ENV_WSSHORT* = WSTK_CSHORT_P
  WSOLD_WIN_ENV_WSINT* = WSTK_CINT_P
  WSOLD_WIN_ENV_WSLONG* = WSTK_CLONG_P
  WSOLD_WIN_ENV_WSINT64* = WSTK_64BIT_LITTLEENDIAN_STRUCTURE
  WSOLD_WIN_ENV_WSSIZE_T* = WSTK_CLONG_P
  WSOLD_WIN_ENV_WSFLOAT* = WSTK_CFLOAT_P
  WSOLD_WIN_ENV_WSDOUBLE* = WSTK_CDOUBLE_P
  WSOLD_WIN_ENV_WSLONGDOUBLE* = WSTK_CLONGDOUBLE_P
  WSTK_CUCHAR* = WSTK_8BIT_UNSIGNED_INTEGER
  WSTK_WSUCHAR* = WSTK_8BIT_UNSIGNED_INTEGER
  WSTP_NUMERICS_ENVIRONMENT_ID* = WSBOERBOEL_NUMERICS_ID
  WSTK_CSHORT* = WSBOERBOEL_CSHORT
  WSTK_CINT* = WSBOERBOEL_CINT
  WSTK_CLONG* = WSBOERBOEL_CLONG
  WSTK_CINT64* = WSBOERBOEL_CINT64
  WSTK_CSIZE_T* = WSBOERBOEL_CSIZE_T
  WSTK_CFLOAT* = WSBOERBOEL_CFLOAT
  WSTK_CDOUBLE* = WSBOERBOEL_CDOUBLE
  WSTK_CLONGDOUBLE* = WSBOERBOEL_CLONGDOUBLE
  WSTK_WSSHORT* = WSBOERBOEL_WSSHORT
  WSTK_WSINT* = WSBOERBOEL_WSINT
  WSTK_WSLONG* = WSBOERBOEL_WSLONG
  WSTK_WSINT64* = WSBOERBOEL_WSINT64
  WSTK_WSSIZE_T* = WSBOERBOEL_WSSIZE_T
  WSTK_WSFLOAT* = WSBOERBOEL_WSFLOAT
  WSTK_WSDOUBLE* = WSBOERBOEL_WSDOUBLE
  WSTK_WSLONGDOUBLE* = WSBOERBOEL_WSLONGDOUBLE
  CC_SUPPORTS_LONG_DOUBLE* = 1

##  #define _extended_nt_ struct _i87extended_nt

template EXTENDED_NT_TO_I87_EXTENDED*(a, b: untyped): untyped =
  a = b

template I87_EXTENDED_TO_EXTENDED_NT*(a, b: untyped): untyped =
  a = b

##  #define _extended_nt_ long double

const
  MLSTDDEV_H* = true
  MLVERS_H* = true
  MLVERSION* = 6
  MLREVISION* = 41
  MLCREATIONID* = 114411
  MLAPI1REVISION* = 1
  MLAPI2REVISION* = 6
  MLAPI3REVISION* = 16
  MLAPI4REVISION* = 25
  MLINTERFACE* = 4
  MLAPIREVISION* = MLAPI4REVISION
  call_dev_allocator* = CallMLAllocatorProc
  new_dev_allocator* = NewMLAllocatorProc
  call_dev_deallocator* = CallMLDeallocatorProc
  new_dev_deallocator* = NewMLDeallocatorProc
  MLSTDWORLD_INIT* = 16
  MLSTDWORLD_DEINIT* = 17
  MLSTDWORLD_MAKE* = 18
  MLSTDWORLD_GET_SIGNAL_HANDLERS* = 29
  MLSTDWORLD_RELEASE_SIGNAL_HANDLERS* = 30
  MLSTDWORLD_PROTOCOL* = 31
  MLSTDWORLD_MODES* = 32
  MLSTDWORLD_STREAMCAPACITY* = 33
  MLSTDWORLD_ID* = 34
  MLSTDDEV_CONNECT_READY* = 19
  MLSTDDEV_CONNECT* = 20
  MLSTDDEV_DESTROY* = 21
  MLSTDDEV_SET_YIELDER* = 22
  MLSTDDEV_GET_YIELDER* = 23
  MLSTDDEV_WRITE_MSG* = 24
  MLSTDDEV_HAS_MSG* = 25
  MLSTDDEV_READ_MSG* = 26
  MLSTDDEV_SET_HANDLER* = 27
  MLSTDDEV_GET_HANDLER* = 28
  MLSTDDEV_GET_SIGNAL_HANDLERS* = 29
  MLSTDDEV_RELEASE_SIGNAL_HANDLERS* = 30
  T_WORLD_INIT* = MLSTDWORLD_INIT
  T_WORLD_DEINIT* = MLSTDWORLD_DEINIT
  T_WORLD_MAKE* = MLSTDWORLD_MAKE
  T_DEV_CONNECT_READY* = MLSTDDEV_CONNECT_READY
  T_DEV_CONNECT* = MLSTDDEV_CONNECT
  T_DEV_DESTROY* = MLSTDDEV_DESTROY
  T_DEV_SET_YIELDER* = MLSTDDEV_SET_YIELDER
  T_DEV_GET_YIELDER* = MLSTDDEV_GET_YIELDER
  T_DEV_WRITE_MSG* = MLSTDDEV_WRITE_MSG
  T_DEV_HAS_MSG* = MLSTDDEV_HAS_MSG
  T_DEV_READ_MSG* = MLSTDDEV_READ_MSG
  T_DEV_SET_HANDLER* = MLSTDDEV_SET_HANDLER
  T_DEV_GET_HANDLER* = MLSTDDEV_GET_HANDLER
  DefaultOptions* = (cast[uint](0x00000000))
  NetworkVisibleMask* = (cast[uint](0x00000003))
  BrowseMask* = (cast[uint](0x00000010))
  NonBlockingMask* = (cast[uint](0x00000020))
  InteractMask* = (cast[uint](0x00000100))
  YieldMask* = (cast[uint](0x00000200))
  UseIPV6Mask* = (cast[uint](0x00010000))
  UseIPV4Mask* = (cast[uint](0x00020000))
  VersionMask* = (cast[uint](0x0F000000))
  UseNewTCPIPConnectionMask* = (cast[uint](0x00100000))
  UseOldTCPIPConnectionMask* = (cast[uint](0x00200000))
  UseUUIDTCPIPConnectionMask* = (cast[uint](0x00000004))
  UseAnyNetworkAddressMask* = (cast[uint](0x00000008))
  NetworkVisible* = (cast[uint](0x00000000))
  LocallyVisible* = (cast[uint](0x00000001))
  InternetVisible* = (cast[uint](0x00000002))
  Browse* = (cast[uint](0x00000000))
  DontBrowse* = (cast[uint](0x00000010))
  NonBlocking* = (cast[uint](0x00000000))
  Blocking* = (cast[uint](0x00000020))
  Interact* = (cast[uint](0x00000000))
  DontInteract* = (cast[uint](0x00000100))
  ForceYield* = (cast[uint](0x00000200))
  UseIPV6* = (cast[uint](0x00010000))
  UseIPV4* = (cast[uint](0x00020000))
  UseNewTCPIPConnection* = (cast[uint](0x00100000))
  UseOldTCPIPConnection* = (cast[uint](0x00200000))
  UseUUIDTCPIPConnection* = (cast[uint](0x00000004))
  UseAnyNetworkAddress* = (cast[uint](0x00000008))
  INFO_MASK* = (1 shl 31)
  INFO_TYPE_MASK* = ((1 shl 31) - 1)
  INFO_SWITCH_MASK* = (1 shl 30)
  MLDEVICE_MASK* = INFO_MASK
  WORLD_MASK* = (INFO_MASK or (1 shl 30))
  UNREGISTERED_TYPE* = 0
  UNIXPIPE_TYPE* = 1
  UNIXSOCKET_TYPE* = 2
  LOOPBACK_TYPE* = 5
  WINLOCAL_TYPE* = 9
  WINFMAP_TYPE* = 10
  WINSHM_TYPE* = 11
  SOCKET2_TYPE* = 12
  GENERIC_TYPE* = 13
  UNIXSHM_TYPE* = 14
  INTRAPROCESS_TYPE* = 15
  MLDEVICE_TYPE* = 0
  MLDEVICE_NAME* = 1
  MLDEVICE_NAME_SIZE* = 2
  MLDEVICE_WORLD_ID* = 5
  SHM_FD* = (UNIXSHM_TYPE * 256 + 0) ##  int
  PIPE_FD* = (UNIXPIPE_TYPE * 256 + 0) ##  int
  PIPE_CHILD_PID* = (UNIXPIPE_TYPE * 256 + 1) ##  int
  SOCKET_FD* = (UNIXSOCKET_TYPE * 256 + 0) ##  int
  INTRA_FD* = (INTRAPROCESS_TYPE * 256 + 0) ##  int
  SOCKET_PARTNER_ADDR* = (UNIXSOCKET_TYPE * 256 + 1) ##  unsigned long
  SOCKET_PARTNER_PORT* = (UNIXSOCKET_TYPE * 256 + 2) ##  unsigned short
  LOOPBACK_FD* = (LOOPBACK_TYPE * 256 + 2) ##  int
  INTRAPROCESS_FD* = (INTRAPROCESS_TYPE * 256 + 0) ##  int
  WINDOWS_SET_NOTIFY_WINDOW* = 2330
  WINDOWS_REMOVE_NOTIFY_WINDOW* = 2331
  WINDOWS_READY_CONDITION* = 2332
  WORLD_THISLOCATION* = 1
  WORLD_MODES* = 2
  WORLD_PROTONAME* = 3
  WORLD_STREAMCAPACITY* = 4
  WORLD_ID* = MLDEVICE_WORLD_ID

##  #define MATHLINK_DEVICE_WORLD_ID (_DATE_ ", " _TIME_)

const
  MLDEVICE_MODE* = MLDEVICE_MASK + 6
  MLDEVICE_OPTIONS* = MLDEVICE_MASK + 7
  YIELDVERSION* = 1
  INTERNAL_YIELDING* = 0
  MAKE_YIELDING* = 1
  CONNECT_YIELDING* = 2
  READ_YIELDING* = 3
  WRITE_YIELDING* = 4
  DESTROY_YIELDING* = 5
  READY_YIELDING* = 6
  MAX_SLEEP* = (600)

template NewMLYielderProc*(userRoutine: untyped): untyped =
  (userRoutine)

const
  NewMLDeviceYielderProc* = NewMLYielderProc

template NewMLHandlerProc*(userRoutine: untyped): untyped =
  (userRoutine)

const
  NewMLDeviceHandlerProc* = NewMLHandlerProc
  MLSIGNAL_H* = true
  WSMAKE_H* = true
  MLPARAMETERSIZE_R1* = 256
  MLPARAMETERSIZE* = 356

template NewMLUserProc*(userRoutine: untyped): untyped =
  (userRoutine)

const
  MLNetworkVisibleMask* = (cast[culong](0x00000003)) ##  00000000000000000000011
  MLBrowseMask* = (cast[culong](0x00000010)) ##  00000000000000000010000
  MLNonBlockingMask* = (cast[culong](0x00000020)) ##  00000000000000000110000
  MLInteractMask* = (cast[culong](0x00000100)) ##  00000000000000100000000
  MLYieldMask* = (cast[culong](0x00000200)) ##  00000000000001000000000
  MLUseIPV6Mask* = (cast[culong](0x00010000)) ##  00000010000000000000000
  MLUseIPV4Mask* = (cast[culong](0x00020000)) ##  00000100000000000000000
  MLVersionMask* = (cast[culong](0x0000F000)) ##  00000001111000000000000
  MLUseNewTCPIPConnectionMask* = (cast[culong](0x00100000)) ##  00100000000000000000000
  MLUseOldTCPIPConnectionMask* = (cast[culong](0x00200000)) ##  01000000000000000000000
  MLUseUUIDTCPIPConnectionMask* = (cast[culong](0x00000004)) ##  00000000000000000000110
  MLUseAnyNetworkAddressMask* = (cast[culong](0x00000008)) ##  00000000000000000001000
  MLDefaultOptions* = (cast[culong](0x00000000))
  MLNetworkVisible* = (cast[culong](0x00000000))
  MLLocallyVisible* = (cast[culong](0x00000001))
  MLInternetVisible* = (cast[culong](0x00000002))
  MLBrowse* = (cast[culong](0x00000000))
  MLDontBrowse* = (cast[culong](0x00000010))
  MLNonBlocking* = (cast[culong](0x00000000))
  MLBlocking* = (cast[culong](0x00000020))
  MLInteract* = (cast[culong](0x00000000))
  MLDontInteract* = (cast[culong](0x00000100))
  MLForceYield* = (cast[culong](0x00000200))
  MLUseIPV6* = (cast[culong](0x00010000))
  MLUseIPV4* = (cast[culong](0x00020000))
  MLUseNewTCPIPConnection* = (cast[culong](0x00100000))
  MLUseOldTCPIPConnection* = (cast[culong](0x00200000))
  MLUseUUIDTCPIPConnection* = (cast[culong](0x00000004))
  MLUseAnyNetworkAddress* = (cast[culong](0x00000008))
  MLASCII_ENC* = 1
  MLBYTES_ENC* = 2
  MLUCS2_ENC* = 3
  MLOLD_ENC* = 4
  MLUTF8_ENC* = 5
  MLUTF16_ENC* = 6
  MLUTF32_ENC* = 8
  MLTOTAL_TEXT_ENCODINGS* = 8
  MLLOGERROR* = 0
  MLLOGWARNING* = 1
  MLLOGNOTICE* = 2
  MLLOGINFO* = 3
  MLLOGDEBUG* = 4
  MLLOGDEBUG1* = 5
  MLLOGDEBUG2* = 6
  MLLOGDEBUG3* = 7
  MLLOGDEBUG4* = 8
  MLNTESTPOINTS* = 4
  MLLINKSERVER_H* = true
  MLSERVICEDISCOVERYAPI_H* = true
  MLSDADDSERVICE* = 0x00000001
  MLSDREMOVESERVICE* = 0x00000002
  MLSDBROWSEERROR* = 0x00000003
  MLSDRESOLVEERROR* = 0x00000004
  MLSDREGISTERERROR* = 0x00000005
  MLSDMORECOMING* = 0x00000010
  MLSDNAMECONFLICT* = 0x00000007
  WSERRNO_H* = true
  WSEUNKNOWN* = -1
  WSEOK* = 0
  WSEDEAD* = 1
  WSEGBAD* = 2
  WSEGSEQ* = 3
  WSEPBTK* = 4
  WSEPSEQ* = 5
  WSEPBIG* = 6
  WSEOVFL* = 7
  WSEMEM* = 8
  WSEACCEPT* = 9
  WSECONNECT* = 10
  WSECLOSED* = 11
  WSEDEPTH* = 12
  WSENODUPFCN* = 13
  WSENOACK* = 15
  WSENODATA* = 16
  WSENOTDELIVERED* = 17
  WSENOMSG* = 18
  WSEFAILED* = 19
  WSEGETENDEXPR* = 20
  WSEPUTENDPACKET* = 21
  WSENEXTPACKET* = 22
  WSEUNKNOWNPACKET* = 23
  WSEGETENDPACKET* = 24
  WSEABORT* = 25
  WSEMORE* = 26
  WSENEWLIB* = 27
  WSEOLDLIB* = 28
  WSEBADPARAM* = 29
  WSENOTIMPLEMENTED* = 30
  WSEINIT* = 32
  WSEARGV* = 33
  WSEPROTOCOL* = 34
  WSEMODE* = 35
  WSELAUNCH* = 36
  WSELAUNCHAGAIN* = 37
  WSELAUNCHSPACE* = 38
  WSENOPARENT* = 39
  WSENAMETAKEN* = 40
  WSENOLISTEN* = 41
  WSEBADNAME* = 42
  WSEBADHOST* = 43
  WSERESOURCE* = 44
  WSELAUNCHFAILED* = 45
  WSELAUNCHNAME* = 46
  WSELAST* = WSELAUNCHNAME
  WSEPDATABAD* = 47
  WSEPSCONVERT* = 48
  WSEGSCONVERT* = 49
  WSENOTEXE* = 50
  WSESYNCOBJECTMAKE* = 51
  WSEBACKOUT* = 52
  WSEBADOPTSYM* = 53
  WSEBADOPTSTR* = 54
  WSENEEDBIGGERBUFFER* = 55
  WSEBADNUMERICSID* = 56
  WSESERVICENOTAVAILABLE* = 57
  WSEBADARGUMENT* = 58
  WSEBADDISCOVERYHOSTNAME* = 59
  WSEBADDISCOVERYDOMAINNAME* = 60
  WSEBADSERVICENAME* = 61
  WSEBADDISCOVERYSTATE* = 62
  WSEBADDISCOVERYFLAGS* = 63
  WSEDISCOVERYNAMECOLLISION* = 64
  WSEBADSERVICEDISCOVERY* = 65
  WSETRACEON* = 996
  WSETRACEOFF* = 997
  WSEDEBUG* = 998
  WSEASSERT* = 999
  WSEUSER* = 1000
  MLERRORS_H* = true
  MLERRNO_H* = true
  MLEUNKNOWN* = -1
  MLEOK* = 0
  MLEDEAD* = 1
  MLEGBAD* = 2
  MLEGSEQ* = 3
  MLEPBTK* = 4
  MLEPSEQ* = 5
  MLEPBIG* = 6
  MLEOVFL* = 7
  MLEMEM* = 8
  MLEACCEPT* = 9
  MLECONNECT* = 10
  MLECLOSED* = 11
  MLEDEPTH* = 12
  MLENODUPFCN* = 13
  MLENOACK* = 15
  MLENODATA* = 16
  MLENOTDELIVERED* = 17
  MLENOMSG* = 18
  MLEFAILED* = 19
  MLEGETENDEXPR* = 20
  MLEPUTENDPACKET* = 21
  MLENEXTPACKET* = 22
  MLEUNKNOWNPACKET* = 23
  MLEGETENDPACKET* = 24
  MLEABORT* = 25
  MLEMORE* = 26
  MLENEWLIB* = 27
  MLEOLDLIB* = 28
  MLEBADPARAM* = 29
  MLENOTIMPLEMENTED* = 30
  MLEINIT* = 32
  MLEARGV* = 33
  MLEPROTOCOL* = 34
  MLEMODE* = 35
  MLELAUNCH* = 36
  MLELAUNCHAGAIN* = 37
  MLELAUNCHSPACE* = 38
  MLENOPARENT* = 39
  MLENAMETAKEN* = 40
  MLENOLISTEN* = 41
  MLEBADNAME* = 42
  MLEBADHOST* = 43
  MLERESOURCE* = 44
  MLELAUNCHFAILED* = 45
  MLELAUNCHNAME* = 46
  MLELAST* = MLELAUNCHNAME
  MLEPDATABAD* = 47
  MLEPSCONVERT* = 48
  MLEGSCONVERT* = 49
  MLENOTEXE* = 50
  MLESYNCOBJECTMAKE* = 51
  MLEBACKOUT* = 52
  MLEBADOPTSYM* = 53
  MLEBADOPTSTR* = 54
  MLENEEDBIGGERBUFFER* = 55
  MLEBADNUMERICSID* = 56
  MLESERVICENOTAVAILABLE* = 57
  MLEBADARGUMENT* = 58
  MLEBADDISCOVERYHOSTNAME* = 59
  MLEBADDISCOVERYDOMAINNAME* = 60
  MLEBADSERVICENAME* = 61
  MLEBADDISCOVERYSTATE* = 62
  MLEBADDISCOVERYFLAGS* = 63
  MLEDISCOVERYNAMECOLLISION* = 64
  MLEBADSERVICEDISCOVERY* = 65
  MLETRACEON* = 996
  MLETRACEOFF* = 997
  MLEDEBUG* = 998
  MLEASSERT* = 999
  MLEUSER* = 1000
  MLYLDMSG_H* = true
  MLGET_H* = true
  MLPUT_H* = true

##  #define MLPutExpression is obsolete, use MLPutComposite

const
  WSTK_H* = true
  WSTKOLDINT* = 'I'
  WSTKOLDREAL* = 'R'
  WSTKFUNC* = 'F'
  WSTKERROR* = (0)              ##  bad token
  WSTKERR* = (0)                ##  bad token

template WSTK_IS_TEXT*(tok: untyped): untyped =
  ((tok and 0x000000F6) == 0x00000022)

const
  WSTKSTR* = '\"'
  WSTKSYM*  = '\x23' 
  WSTKOPTSYM* = 'O'
  WSTKOPTSTR* = 'Q'
  WSTKREAL* = '*'
  WSTKINT* = '+'
  WSTKPCTEND* = ']'
  WSTKSEND* = ','
  WSTKELEN* = ' '
  WSTKNULL* = '.'
  WSTKOLDSYM* = 'Y'
  WSTKOLDSTR* = 'S'
  WSTKPACKED* = 'P'
  WSTKARRAY* = 'A'
  WSTKDIM* = 'D'
  WSLENGTH_DECODER* = (cast[uint](1) shl 16)
  WSTKPACKED_DECODER* = (cast[uint](1) shl 17)
  WSTKARRAY_DECODER* = (cast[uint](1) shl 18)
  WSTKNULLSEQUENCE_DECODER* = (cast[uint](0))
  MLINTEGER64_H* = true
  MLGETNUMBERS_HPP* = true
  MLGETSTRINGS_HPP* = true
  MLGETSYMBOLS_HPP* = true
  MLPUTNUMBERS_HPP* = true
  MLPUTSTRINGS_HPP* = true
  MLPUTSYMBOLS_HPP* = true
  MLNTYPES_H* = true
  MLNUMENV_H* = true
  MLTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 164
  MLTK_32BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 165
  MLTK_32BIT_UNSIGNED_BIGENDIAN_INTEGER* = MLTK_32BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  MLTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 166
  MLTK_64BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER* = 167
  MLTK_64BIT_UNSIGNED_BIGENDIAN_INTEGER* = MLTK_64BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER
  MLTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 226
  MLTK_16BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 227
  MLTK_16BIT_UNSIGNED_LITTLEENDIAN_INTEGER* = MLTK_16BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  MLTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 228
  MLTK_32BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 229
  MLTK_32BIT_UNSIGNED_LITTLEENDIAN_INTEGER* = MLTK_32BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  MLTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 230
  MLTK_64BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER* = 231
  MLTK_64BIT_UNSIGNED_LITTLEENDIAN_INTEGER* = MLTK_64BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER
  MLTK_BIGENDIAN_IEEE754_SINGLE* = 180
  MLTK_BIGENDIAN_IEEE754_DOUBLE* = 182
  MLTK_BIGENDIAN_128BIT_DOUBLE* = 184
  MLTK_LITTLEENDIAN_IEEE754_SINGLE* = 244
  MLTK_LITTLEENDIAN_IEEE754_DOUBLE* = 246
  MLTK_LITTLEENDIAN_128BIT_DOUBLE* = 248

template MLNE_SIZESELECTOR*(tok: untyped): untyped =
  MLNE_SELECTOR(0, tok)

const
  MLNE_INITSELECTOR* = (0)

template MLNE_TOSTRINGSELECTOR*(tok: untyped): untyped =
  MLNE_SELECTOR(if MLNE_IS_REAL(tok): MLTKREAL else: MLTKINT, tok)

template MLNE_FROMSTRINGSELECTOR*(dtok, stok: untyped): untyped =
  MLNE_SELECTOR(dtok, stok)

template MLNE_STOK*(selector: untyped): untyped =
  ((selector) and 0x000000FF)

template MLNE_DTOK*(selector: untyped): untyped =
  (((selector) and 0x0000FF00) shr 8)

template MLNE_IS_BINARY*(tok: untyped): untyped =
  ((tok) and BINARY_MASK)

template MLNE_IS_REAL*(tok: untyped): untyped =
  ((tok) and REAL_MASK)

template MLNE_TEXT_TOKEN*(tok: untyped): untyped =
  (if MLNE_IS_REAL(tok): MLTKREAL else: MLTKINT)

const
  MLTK_CSHORT_P* = ((BINARY_MASK or SIZEVARIANT_MASK or 1))
  MLTK_CINT_P* = ((BINARY_MASK or SIZEVARIANT_MASK or 2))
  MLTK_CLONG_P* = ((BINARY_MASK or SIZEVARIANT_MASK or 3))
  MLTK_CFLOAT_P* = ((BINARY_MASK or SIZEVARIANT_MASK or REAL_MASK or 1))
  MLTK_CDOUBLE_P* = ((BINARY_MASK or SIZEVARIANT_MASK or REAL_MASK or 2))
  MLTK_CLONGDOUBLE_P* = ((BINARY_MASK or SIZEVARIANT_MASK or REAL_MASK or 3))
  MLTK_64BIT_LITTLEENDIAN_STRUCTURE* = 196
  MLTK_64BIT_BIGENDIAN_STRUCTURE* = 197
  MLTK_128BIT_EXTENDED* = 158
  MLTK_128BIT_LONGDOUBLE* = 158
  MLTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED* = 218
  MLTK_INTEL_80BIT_EXTENDED* = 216
  MLMASTIFF_NUMERICS_ID* = "mastiff"

##  #define _extended_nt_ struct _i87extended_nt

template EXTENDED_NT_TO_I87_EXTENDED*(a, b: untyped): untyped =
  a = b

template I87_EXTENDED_TO_EXTENDED_NT*(a, b: untyped): untyped =
  a = b

##  #define _extended_nt_ long double

const
  WSSTRING_H* = true
  MAX_BYTES_PER_OLD_CHARACTER* = 3
  MAX_BYTES_PER_NEW_CHARACTER* = 6
  WS_MAX_BYTES_PER_CHARACTER* = MAX_BYTES_PER_NEW_CHARACTER

template WSStringFirstPos*(s, pos: untyped): untyped =
  WSStringFirstPosFun(s, addr((pos)))

template WSStringChar*(pos: untyped): untyped =
  WSStringCharacter((pos).str, (pos).`end`)

template WSOldStringFirstPos*(s, pos: untyped): untyped =
  WSOldStringFirstPosFun(s, addr((pos)))

const
  MLCAPUT_H* = true
  ML_USES_NEW_PUTBYTEARRAY_API* = 1
  MLCAGET_H* = true
  MLUNICODECONTAINER_HPP* = true

template MLUCS2String*(container: untyped): untyped =
  container.pointer.ucs2

template MLUTF8String*(container: untyped): untyped =
  container.pointer.utf8

template MLUTF16String*(container: untyped): untyped =
  container.pointer.utf16

template MLUTF32String*(container: untyped): untyped =
  container.pointer.utf32

template MLUnicodeStringLength*(container: untyped): untyped =
  container.length

template MLUnicodeStringType*(container: untyped): untyped =
  container.`type`

const
  MLMARK_H* = true
  MLXFER_H* = true
  MLSYNC_H* = true
  MLPKT_H* = true
  MLPKTNO_H* = true
  ILLEGALPKT* = 0
  CALLPKT* = 7
  EVALUATEPKT* = 13
  RETURNPKT* = 3
  INPUTNAMEPKT* = 8
  ENTERTEXTPKT* = 14
  ENTEREXPRPKT* = 15
  OUTPUTNAMEPKT* = 9
  RETURNTEXTPKT* = 4
  RETURNEXPRPKT* = 16
  DISPLAYPKT* = 11
  DISPLAYENDPKT* = 12
  MESSAGEPKT* = 5
  TEXTPKT* = 2
  INPUTPKT* = 1
  INPUTSTRPKT* = 21
  MENUPKT* = 6
  SYNTAXPKT* = 10
  SUSPENDPKT* = 17
  RESUMEPKT* = 18
  BEGINDLGPKT* = 19
  ENDDLGPKT* = 20
  FIRSTUSERPKT* = 128
  LASTUSERPKT* = 255
  MLALERT_H* = true

template NewMLAlertProc*(userRoutine: untyped): untyped =
  MLAlertCast((userRoutine))

template NewMLRequestProc*(userRoutine: untyped): untyped =
  MLRequestCast((userRoutine))

template NewMLConfirmProc*(userRoutine: untyped): untyped =
  MLConfirmCast((userRoutine))

template NewMLRequestArgvProc*(userRoutine: untyped): untyped =
  MLRequestArgvCast((userRoutine))

template NewMLRequestToInteractProc*(userRoutine: untyped): untyped =
  MLRequestToInteractCast((userRoutine))

const
  MLWIN_H* = true
  DLG_LINKNAME* = 101
  DLG_TEXT* = 102
  RIDOK* = 1
  RIDCANCEL* = 104
  MLDARWIN_H* = true
  MLUNIX_H* = true
  WSWAITSUCCESS* = 1
  WSWAITERROR* = 2
  WSWAITTIMEOUT* = 3
  WSWAITCALLBACKABORTED* = 4
  MLREADY_H* = true
  MLTIME_H* = true
  MLREADYPARALLELERROR* = -1
  MLREADYPARALLELTIMEDOUT* = -2
  MLREADYPARALLELINVALIDARGUMENT* = -3
  MLWAITSUCCESS* = 1
  MLWAITERROR* = 2
  MLWAITTIMEOUT* = 3
  MLWAITCALLBACKABORTED* = 4
  MLTM_H* = true
  UNBRAND_H* = true
